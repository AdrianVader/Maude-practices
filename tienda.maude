
fmod STRINGS is

 pr STRING .
 sort Strings .
 subsort String < Strings .

 op sv : -> Strings [ctor] .
 op __ : Strings Strings -> Strings [ctor assoc id: sv] .

endfm

fmod ABB is
 pr STRING .
 pr STRINGS .

 sort Par .

 op <_,_> : Nat Nat -> Par [ctor] .

 sort ABB .

 op vacio : -> ABB [ctor] .
 op _[_,_]_ : ABB String Par ABB -> ABB [ctor] .

 vars C C' V V' : Nat .
 vars P P' : Par .
 vars S S' : String .
 vars A A' HI HD : ABB .

 op primero : Par -> Nat .
 eq primero(< C, V >) = C .

 op segundo : Par -> Nat .
 eq segundo(< C, V >) = V .

 *** La primera pareja es la que tenemos y la segunda la que queremos introducir.
 *** Sumamos la cantidad y actualizamos el precio.
 op insertarNuevo : Par Par -> Par .
 eq insertarNuevo(< C, V >, < C', V' >) = < C + C', V' > .

 op quitar : Par Nat ~> Par .
 ceq quitar(< C, V >, C') = < sd(C, C'), V >
  if C >= C' .

 op insertar : ABB String Par -> ABB .
 eq insertar(vacio, S, P) = vacio [S, P] vacio .
 ceq insertar(HI [S, P] HD, S', P') = HI [S, insertarNuevo(P, P')] HD
  if S == S' .
 ceq insertar(HI [S, P] HD, S', P') = HI [S, P] insertar(HD, S', P')
  if S < S' .
 ceq insertar(HI [S, P] HD, S', P') = insertar(HI, S', P') [S, P] HD
  if S > S' .

 op cantidad : ABB String -> Nat .
 eq cantidad(vacio, S) = 0 .
 ceq cantidad(HI [S, P] HD, S') = primero(P)
  if S == S' .
 ceq cantidad(HI [S, P] HD, S') = cantidad(HD, S')
  if S < S' .
 ceq cantidad(HI [S, P] HD, S') = cantidad(HI, S')
  if S > S' .

 op precio : ABB String ~> Nat .
 ceq precio(HI [S, P] HD, S') = segundo(P)
  if S == S' .
 ceq precio(HI [S, P] HD, S') = precio(HD, S')
  if S < S' .
 ceq precio(HI [S, P] HD, S') = precio(HI, S')
  if S > S' .

 op vender : ABB String Nat -> ABB .
 eq vender(vacio, S, C) = vacio .
 ceq vender(HI [S, P] HD, S', C) = HI [S, quitar(P, C)] HD
  if S == S' .
 ceq vender(HI [S, P] HD, S', C) = HI [S, P] vender(HD, S', C)
  if S < S' .
 ceq vender(HI [S, P] HD, S', C) = vender(HI, S', C) [S, P] HD
  if S > S' .

 op venderDeUnoEnUno : ABB String -> ABB .
 eq venderDeUnoEnUno(HI, S) = vender(HI, S, 1) .

 op inorden : ABB -> Strings .
 eq inorden(vacio) = sv .
 eq inorden(HI [S, P] HD) = inorden(HI) S inorden(HD) .

endfm

fmod GENTE is
 pr STRING .

 sorts Gente Comprador Representante .
 subsort Comprador Representante < Gente .

 op nadie : -> Gente [ctor] .
 op __ : Gente Gente -> Gente [ctor assoc comm id: nadie] .

 op comprador : String Nat -> Comprador [ctor] .
 op representante : String Nat Nat -> Representante [ctor] .
endfm

mod TIENDA is
 pr GENTE .
 pr ABB .
 pr NAT .

 sort Tienda .

 *** Catalogo de peliculas, de libros y dinero en caja.
 op [_|_,_,_] : Gente ABB ABB Nat -> Tienda [ctor] .

 var  G : Gente .
 var  S : String .
 vars N D D' V : Nat .
 vars P P' L L' : ABB .

 crl [venta-peli] :
     [ comprador(S, N) G | P, L, D ]
  => [ G | vender(P, S, N), L, D + (precio(P, S) * N) ]
  if cantidad(P, S) >= N .

 crl [ventaDeUnoEnUno-peli] :
     [ comprador(S, N) G | P, L, D ]
  => [ comprador(S, sd(N,1)) G | venderDeUnoEnUno(P, S), L, D + (precio(P, S)) ]
  if cantidad(P, S) > 0 .

 ***(
 *** Usando condiciones de encaje de patrones.
 crl [venta-peli] :
     [ comprador(S, N) G | P, L, D ]
  => [ G | P', L, D' ]
  if cantidad(P, S) >= N /\
     P' := vender(P, S, N) /\
     D' := D + (precio(P, S) * N) .
 )

 crl [venta-libro] :
     [ comprador(S, N) G | P, L, D ]
  => [ G | P, vender(L, S, N), D + (precio(L, S) * N) ]
  if cantidad(L, S) >= N .

 crl [ventaDeUnoEnUno-libro] :
     [ comprador(S, N) G | P, L, D ]
  => [ comprador(S, sd(N,1)) G | P, venderDeUnoEnUno(L, S), D + (precio(L, S)) ]
  if cantidad(L, S) > 0 .

 ***(
 *** Usando condiciones de encaje de patrones.
 crl [venta-libro] :
     [ comprador(S, N) G | P, L, D ]
  => [ G | P, L', D' ]
  if cantidad(P, S) >= N /\
     L' := vender(L, S, N) /\
     D' := D + (precio(L, S) * N) .
 )

 crl [nuevas-pelis] :
     [ representante(S, N, V) G | P, L, D ]
  => [ G | insertar(P, S, < N, V * 2 >), L, sd(D, N * V) ]
  if N * V <= D .

 crl [nuevos-libros] :
     [ representante(S, N, V) G | P, L, D ]
  => [ G | P, insertar(L, S, < N, V * 2 >), sd(D, N * V) ]
  if N * V <= D .
endm

mod EJEMPLO is
 pr TIENDA .

 ops c1 c2 c3 : -> Comprador .
 eq c1 = comprador("a", 11) .
 eq c2 = comprador("b", 2) .
 eq c3 = comprador("c", 2) .

 ops r1 r2 r3 : -> Representante .
 eq r1 = representante("a", 10, 10) .
 eq r2 = representante("b", 2, 20) .
 eq r3 = representante("c", 3, 30) .

 op tienda : -> Tienda .
 ---eq tienda = [ c1 c2 c3 r1 r2 r3 | vacio, vacio, 100] .
 eq tienda = [ r1 c1 | vacio, vacio, 100] .
endm

rew tienda .

frew tienda .

search tienda =>* [ G:Gente | P:ABB, L:ABB, D:Nat] s.t. D:Nat > 100 .

show path 7 .

red insertar( insertar(vacio["Teresa",< 1,9001 >]vacio, "Adri", < 1, 9002 >), "ElResto", < 1000000000,0 >) .

red inorden( insertar( insertar(vacio["Teresa",< 1,9001 >]vacio, "Adri", < 1, 9002 >), "ElResto", < 1000000000,0 >)) .

red venderDeUnoEnUno(insertar( insertar(vacio["Teresa",< 1,9001 >]vacio, "Adri", < 1,9002 >), "ElResto", < 1000000000,0 >), "ElResto") .

search tienda =>* [ G:Gente | P:ABB, L:ABB, D:Nat] s.t. D:Nat > 0 .



eof




